{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Calibri;}{\f1\fnil Calibri;}{\f2\fnil\fcharset2 Symbol;}}
{\colortbl ;\red0\green0\blue0;\red0\green77\blue187;\red0\green0\blue255;}
{\*\generator Riched20 10.0.19041}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\cf1\b\f0\fs22\lang9 Objective\cf0\b0 : \par
To examine the impact of COVID-19.\par
\b Users of the System\b0 : \par
1.   Admin \par
2.   Customer \par
\b Functional Requirements\b0 :           \par

\pard{\pntext\f2\'B7\tab}{\*\pn\pnlvlblt\pnf2\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1 Additional information of Covid-19 are given in read mode.\par
{\pntext\f2\'B7\tab}Each side navigation icons has its own specific contents.\par
{\pntext\f2\'B7\tab}Vaccinated and non-vaccinated are also mention with the percentage.\par
{\pntext\f2\'B7\tab}Vaccine 1st and 2nd dose are vaccinated by 54.9% of the people in India currently.\par
{\pntext\f2\'B7\tab}Affected people of Covid-19 are differentiated by confirmed, active, deceased, recovered.\par
{\pntext\f2\'B7\tab}Total no. of people vaccinated doses are also administrated.\par
{\pntext\f2\'B7\tab}The tabular column referred here is mentioned the no. of people affected by Covid-19 are differentiated by state-wise and differentiated by confirmed, active, deceased, recovered.\par
{\pntext\f2\'B7\tab}India map mentioned her indicates the states with coloured effects mentions the Covid affected and delivers contents of state.\par

\pard\sa200\sl276\slmult1\b While the above ones are the basic functional features expected, the below ones can\par
be nice to Have add-on features\b0 : \par

\pard{\pntext\f2\'B7\tab}{\*\pn\pnlvlblt\pnf2\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1 Helpline number\par
{\pntext\f2\'B7\tab}Household things\par
{\pntext\f2\'B7\tab}Nearby Govt. hospital\par
{\pntext\f2\'B7\tab}Oxygen supply\par
{\pntext\f2\'B7\tab}municipality\par
{\pntext\f2\'B7\tab}medicinal supply\par
{\pntext\f2\'B7\tab}reporting side effects\par
{\pntext\f2\'B7\tab}Home remedies for Covid-19\par
{\pntext\f2\'B7\tab}District-wise vaccination camp\par
{\pntext\f2\'B7\tab}languages(english,tamil,hindi)\par
{\pntext\f2\'B7\tab}vaccination certificate linkage\par
{\pntext\f2\'B7\tab}chatbox and faq\par
{\pntext\f2\'B7\tab}statistics\par
{\pntext\f2\'B7\tab}online doctor appointment \par

\pard\sa200\sl276\slmult1\b Non-Functional Requirements:\par
\cf2\b0 Security\~\par

\pard{\pntext\f2\'B7\tab}{\*\pn\pnlvlblt\pnf2\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\cf0  App Platform \f1\endash User\~Name/Password-Based Credentials\~\par
{\pntext\f2\'B7\tab}\f0  Sensitive data has to be categorized and stored in a secure manner\~\par
{\pntext\f2\'B7\tab}Secure connection for transmission of any data\~\par

\pard\sa200\sl276\slmult1\cf2 Performance\~\par

\pard{\pntext\f2\'B7\tab}{\*\pn\pnlvlblt\pnf2\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\cf0\~Peak Load Performance (during Festival days, National holidays etc)\~\par
{\pntext\f2\'B7\tab}\~\~eCommerce \par
{\pntext\f2\'B7\tab}\~Admin application &lt; \par
{\pntext\f2\'B7\tab}\~\~Non-Peak\~Load Performance\~\par
{\pntext\f2\'B7\tab}\~\~\~eCommerce &lt;\par
{\pntext\f2\'B7\tab}\~Admin Application &lt; \par

\pard\sa200\sl276\slmult1\cf2 Availability\~\par
\cf0\~\~\~\~\~\~\~99.99 % Availability\~\par
\cf2 Standard Features\~\par

\pard{\pntext\f2\'B7\tab}{\*\pn\pnlvlblt\pnf2\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\cf0  \~\~\~ \~Scalability\~\par
{\pntext\f2\'B7\tab}\~\~\~\~\~Maintainability\~\par
{\pntext\f2\'B7\tab}\~\~\~\~\~Usability\~\par
{\pntext\f2\'B7\tab}\~\~\~\~Availability\~\par
{\pntext\f2\'B7\tab}\~\~\~Failover\~\par

\pard\sa200\sl276\slmult1\cf2 Logging &amp; Auditing\~\cf0\par

\pard{\pntext\f2\'B7\tab}{\*\pn\pnlvlblt\pnf2\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\~The system should support logging(app/web/DB) &amp; auditing at all levels\~\par

\pard\sa200\sl276\slmult1\cf2 Monitoring\cf0\~\par

\pard{\pntext\f2\'B7\tab}{\*\pn\pnlvlblt\pnf2\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1  \~Should be able to monitor via as-is enterprise monitoring tools\~\par

\pard\sa200\sl276\slmult1\cf2 Cloud\~\par

\pard{\pntext\f2\'B7\tab}{\*\pn\pnlvlblt\pnf2\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\cf0  \~The Solution should be made Cloud-ready and should have a minimum impact when moving away to Cloud infrastructure\~\par

\pard\sa200\sl276\slmult1\cf2 Browser Compatible\~\b\par
\cf0\b0 All latest browsers\par

\pard\sa200\sl276\slmult1\par
\b Output/ Post Condition: \b0\par

\pard{\pntext\f2\'B7\tab}{\*\pn\pnlvlblt\pnf2\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1  Records Persisted in Success \par
{\pntext\f2\'B7\tab}Standalone website / Deployed in an website Container\par

\pard\sa200\sl276\slmult1  \par
\b Technology Stack \b0\par
 \par
\cf2 Front End \cf0 : css, html, java script\par
\par
\b Key points to remember\b0 : \par
1.   The id (for frontend) and attributes(backend) mentioned in the SRS should not be\par
modified at any cost. Failing to do may fail test cases. \par
2.   Remember to check the screenshots provided with the SRS. Strictly adhere to id\par
mapping and attribute mapping. Failing to do may fail test cases. \par
3.   Strictly adhere to the proper project scaffolding (Folder structure), coding\par
conventions, method definitions and return types. \par
Adhere strictly to the endpoints given below.\par
\b Application assumptions\b0 : \par
1.   The login page should be the first page rendered when the website loads. \par
2. .   Unless logged into the system, the user cannot navigate to any other pages. \par
3.   Logging out must again redirect to the login page. \par
4.   To navigate to the admin side, you can store a user type as admin in the\par
database with a username and password as admin. \par
5.  Use admin/admin as the username and password to navigate to the admin\par
dashboard. \par
 \par
\b Validations: \b0\par
1.   Basic email validation should be performed. \par
Password validations should be performed\par
\par
\b Project Tasks\b0 : \par
\b API Endpoints\b0 : \par
 \cf2 USER \par
\cf0 Action URL Method Response \par
Login /login POST true/false \par
Signup /signup POST true/false \par
Get All features \f1\endash  Home /home GET Array of features\par
  \par
\cf2 ADMIN \par
\cf0 Action URL Method Response \par
Get All features /admin GET Array of features\par
Add features /admin/addfeatures POST features added \par
Delete features /admin/delete/\{id\} GET features deleted \par
features Edit /admin/featureEdit/\{id\} GET Get All details of Particular id \par
feature Edit /admin/featureEdit/\{id\} POST Save the Changes \par
\b Frontend:  \b0\par
\cf2 Customer: \cf0\par
1\cf1 . Auth\cf0 : Design an auth component (Name the component as auth for angular website\par
whereas Auth for react website. Once the component is created in react website, name the\par
jsx file as same as component name i.e Auth.jsx file) where the customer can\par
authenticate login and signup credentials\par
2.   Signup: Design a signup page component (Name the component as signup for\par
angular website whereas Signup for react website. Once the component is created in react\par
website, name the jsx file as same as component name i.e Signup.jsx file)where the new\par
customer has options to sign up by providing their basic details. \par
a.   Ids: \par

\pard{\pntext\f2\'B7\tab}{\*\pn\pnlvlblt\pnf2\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\f0  email \par
{\pntext\f2\'B7\tab} username \par
{\pntext\f2\'B7\tab} mobilenumber \par
{\pntext\f2\'B7\tab}password \par
{\pntext\f2\'B7\tab}confirmpassword \par
{\pntext\f2\'B7\tab}  submitButton \par
{\pntext\f2\'B7\tab}signinLink \par
{\pntext\f2\'B7\tab} signupBox \par

\pard\sa200\sl276\slmult1 b.   API endpoint Url: {{\field{\*\fldinst{HYPERLINK http://localhost:8000/signup }}{\fldrslt{http://localhost:8000/signup\ul0\cf0}}}}\f0\fs22  \par
c.   Output screenshot:\par
\par
3.   Login: Design a login page component named (Name the component as login for\par
angular website whereas Login for react app. Once the component is created in react\par
website, name the jsx file as same as component name i.e Login.jsx file)where the\par
existing customer can log in using the registered email id and password. \par
a.   Ids: \par

\pard{\pntext\f2\'B7\tab}{\*\pn\pnlvlblt\pnf2\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1   email \par
{\pntext\f2\'B7\tab}password \par
{\pntext\f2\'B7\tab} submitButton \par
{\pntext\f2\'B7\tab} signupLink \par
{\pntext\f2\'B7\tab} loginBox \par

\pard\sa200\sl276\slmult1 b.   API endpoint Url: {{\field{\*\fldinst{HYPERLINK http://localhost:8000/login }}{\fldrslt{http://localhost:8000/login\ul0\cf0}}}}\f0\fs22  \par
c.   Output screenshot: \par
\par
4.   Dashboard / Home: Design a home page component named (Name the\par
component as homepagefor angular website whereas HomePage for react website. Once the\par
component is created in react website, name the jsx file as same as component name \fs36\par
\fs22 grid elements with appropriate filter options. \par
a.   Ids: \par
1. userNavbar \par
2. helpline numbers button\par
3. Medicinal supply\par
4. reporting side effects button\par
5. languages button\par
6. chatbox and faq\par
7.online doctor appoinment button\par
8.logout button\par
a. API endpoint Url: {{\field{\*\fldinst{HYPERLINK http://localhost:8000/home }}{\fldrslt{http://localhost:8000/home\ul0\cf0}}}}\f0\fs22  \par
b. Screenshot \par
\par
Admin:  \par
6.   Admin Dashboard: Design a dashboard page named (Name the component\par
as dashboard for angular website whereas Dashboard for react website. Once the\par
component is created in react website, name the jsx file as same as component name i.e\par
Dashboard.jsx file) where the list of feautures is displayed on the admin side.  \par
a. Admin Navigation: Design a navigation component (Name the component\par
as adminhomepage for angular app whereas AdminHomePage for react website. Once\par
the component is created in react website, name the jsx file as same as component\par
name i.e AdminHomePage.jsx file) that can navigate to features of website. \par
      i.Ids: \par
1. adminNavbar \par
2. adminfeatureButton \par
3. adminconfirmButton \par
4. logoutButton \par
 \par
b. Add feature: Design an add feature component (Name the component\par
as addfeature for angular website whereas Addfeature for react website. Once the\par
component is created in react website, name the jsx file as same as component name i.e\par
Addfeature.jsx file) in which the admin can add new products to the inventory. \par
       i.Ids: \par
1.featureName \par
2.featureDescription \par
3.featureImageURL \par
4.addfeatureButton \par
ii.API endpoint Url: {{\field{\*\fldinst{HYPERLINK http://localhost:8000/addfeature }}{\fldrslt{http://localhost:8000/addfeature\ul0\cf0}}}}\f0\fs22\par
Screenshot\par
\par
\b Backend: \b0\par
Class and Method description: \par
\b  \par
Model Layer\b0 : \par
 \par
1.   UserModel: This class stores the user type (admin or the customer) and all user\par
information. \par
a.   Attributes:\par
i.   email: String \par
ii.   password: String \par
iii.   username: String \par
iv.   mobileNumber: String \par
 v.   active: Boolean \par
vi.   role: String \par
 \par
2.   LoginModel: This class contains the email and password of the user. \par
a.   Attributes: \par
   i.   email: String \par
  ii.   password: String \par
 \par
3.   featureModel: This class stores the details of the product. \par
a.   Attributes: \par
                                                         i.   featureId: String \par
                                                       ii.   imageUrl: String \par
                                                      iii.   featureName: String \par
                                                      iv.   price: String \par
                                                       v.   description: String \par
                                                      vi.   quantity: String \par
 \par
4.Controller Layer: \par
a.SignupController: This class control the user signup \par
b.   Methods: \par
                 i.   saveUser(UserModel user): This method helps to store users in the\par
database and return true or false based on the database transaction. \par
5.   LoginController: This class controls the user login. \par
a.   Methods:  \par
              i.   checkUser(LoginModel data): This method helps the user to sign up for\par
the application and must return true or false. \par
8.   featureController: This class controls the add/edit/update/view feature\par
a.   Methods:  \par
                 i.   List&lt;featureModel&gt; getfeature(): This method helps the admin to fetch\par
all feature from the database. \par
                ii.   List&lt;featureModel&gt; getHomefeature(): This method helps to retrieve\par
all the feature from the database. \par
               iii.   featureModel productEditData(String id): This method helps to retrieve\par
a feature from the database based on the productid. \par
            iv.  featureEditSave(ProductModel data): This method helps to edit a\par
feature and save it to the database. \par
               v.   featureSave(featureModel data): This method helps to add a new\par
feature to the database. \par
               vi.   featureDelete (String id): This method helps to delete a feature from\par
the database. \par
}
 